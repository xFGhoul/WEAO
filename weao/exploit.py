from typing import Dict, Tuple


class Exploit:
    """
    Class Interface Containing Exploit Attributes

    Attributes
    ----------
    updated: :class:`bool`
        Status Of Current Exploit
    status_code: :class:`int`
        Status Code of Exploit
    version: :class:`str`
        Current Version of Exploit
    roblox_version: :class:`str`
        Supported Roblox Version
    webiste: :class:`str`
        Exploit Website URL
    discord: :class:`str`
        Exploit Discord URL
    v3rmillion: :class:`str`
        Exploit V3rmillion post
    download_url: :class:`str`
        Exploit Download URL
    is_free: :class:`bool`
        If The Exploit is Free for Use
    unc: :class:`bool`
        If The Exploit is UNC Compatabile
    type: :class:`bool`
        Type of Exploit, Script, Executor, or Both.
    platform: :class:`str`
        Supported Platform of Exploit
    last_update: :class:`int`
        Last update of Exploit in Unix Time
    """

    __slots__: Tuple[str, ...] = (
        "updated",
        "status_code",
        "version",
        "roblox_version",
        "website",
        "discord",
        "v3rmillion",
        "download_url",
        "is_free",
        "unc",
        "type",
        "platform",
        "last_update",
    )

    def __init__(self, data: Dict) -> None:
        self.updated: bool = data.get("updated")
        self.status_code: int = data.get("status_code")
        self.version: str = data.get("exploit_version")
        self.roblox_version: str = data.get("roblox_version")
        self.website: str = data.get("website_url")
        self.discord: str = data.get("discord_url")
        self.v3rmillion: str = data.get("v3rmillion_url")
        self.download_url: str = data.get("download_url")
        self.is_free: bool = data.get("is_free")
        self.unc: bool = data.get("unc")
        self.type: str = data.get("type")
        self.platform: str = data.get("platform")
        self.last_update: int = data.get("last_update")

    def __repr__(self) -> str:
        return f"<Exploit updated={self.updated} version={self.version}>"


class Log:
    def __init__(self, data: Dict) -> None:
        self.version = data.get("exploit_version")
        self.roblox_version = data.get("roblox_version")
        self.last_update = data.get("last_update")

    def __repr__(self) -> str:
        return f"<Log version={self.version} last_update={self.last_update}>"


class Roblox:
    """
    Class Interface Containing Roblox Attributes

    Attributes
    ----------
    version: :class:`str`
        Current Version of Roblox
    last_update: :class:`int`
        Last update of Exploit in Unix Time
    """

    __slots__: Tuple[str, ...] = (
        "version",
        "last_update",
    )

    def __init__(self, data: Dict) -> None:
        self.version: str = data.get("version")
        self.last_update: int = data.get("last_update_unix")


class Synapse(Exploit):
    ...


class ScriptWare(Exploit):
    ...


class Krnl(Exploit):
    ...


class Dx9Ware(Exploit):
    ...


class Electron(Exploit):
    ...


class WeAreDevs(Exploit):
    ...


class OxygenU(Exploit):
    ...


class Fluxus(Exploit):
    ...


class Celestial(Exploit):
    ...


class Comet(Exploit):
    ...


class Elexe(Exploit):
    ...
